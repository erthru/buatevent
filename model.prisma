generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    ORGANIZER
}

enum EventType {
    ONLINE
    OFFLINE
    BOTH
}

enum EventMemberStatus {
    UNPAID
    PAID
}

model User {
    id        Int        @id @default(autoincrement())
    email     String     @unique
    password  String
    role      UserRole
    isActive  Boolean
    createdAt DateTime   @default(now())
    updatedAt DateTime?  @updatedAt
    admin     Admin?
    organizer Organizer?
}

model Admin {
    id        Int       @id @default(autoincrement())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    userId    Int       @unique
    user      User      @relation(fields: [userId], references: [id])
}

model Organizer {
    id        Int       @id @default(autoincrement())
    username  String    @unique
    name      String
    avatar    String
    phone     String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    userId    Int       @unique
    user      User      @relation(fields: [userId], references: [id])
    events    Event[]
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    slug      String    @unique
    thumbnail String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    events    Event[]
}

model Event {
    id           Int           @id @default(autoincrement())
    title        String
    slug         String        @unique
    thumbnail    String
    body         String
    startAt      DateTime
    endAt        DateTime
    type         EventType
    isPublished  Boolean
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
    categoryId   Int
    category     Category      @relation(fields: [categoryId], references: [id])
    organizerId  Int
    organizer    Organizer     @relation(fields: [organizerId], references: [id])
    eventTickets EventTicket[]
    eventMembers EventMember[]
}

model EventTicket {
    id           Int           @id @default(autoincrement())
    name         String
    price        Int
    quota        Int
    description  String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
    eventId      Int
    event        Event         @relation(fields: [eventId], references: [id])
    eventMembers EventMember[]
}

model EventMember {
    id            Int               @id @default(autoincrement())
    name          String
    email         String
    phone         String
    status        EventMemberStatus
    createdAt     DateTime          @default(now())
    updatedAt     DateTime?         @updatedAt
    eventId       Int
    event         Event             @relation(fields: [eventId], references: [id])
    eventTicketId Int
    eventTicket   EventTicket       @relation(fields: [eventTicketId], references: [id])
}
